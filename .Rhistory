#source("functions_preprocessing.R")
library(ggplot2)
library(gplots)
library(huge)
library(igraph)
# Load datasets
X = read.table("simulated_graphs/sim20_1_1/save/data/data.1.txt",header=T)
View(X)
Y = read.table("simulated_graphs/sim20_1_2/save/data/data.1.txt",header=T)
# Convert to non-paranormal distribution
X.npn = huge.npn(X)
Y.npn = huge.npn(Y)
source("functions_LDGM.R")
### Step 2: Estimating the latent covariance matrix of X and Y
E_X = estimateLatentCorMatrix(X)
E_Y = estimateLatentCorMatrix(Y)
### Step 3: Accelerated proximal gradient descent to solve for beta
Q = E_X %x% E_Y
b = c(E_X-E_Y)
k = 0
beta_kmin1 = rnorm(length(b), 0, 1)#rep(10,length(b)) # initial guess
obj = vector("double",0)
termination_condition = FALSE
k = k+1
# Gradient descent
w = beta_kmin1 - t_k*(Q %*% beta_kmin1 + b)
lambda=1
t_k=0.01
# Gradient descent
w = beta_kmin1 - t_k*(Q %*% beta_kmin1 + b)
# Regularization
beta_k = rep(0,length(w))
for (i in 1:length(w)){
beta_k[i] = (abs(w[i]) - lambda*t_k)*(abs(w[i]) - lambda*t_k > 0)*sign(w[i])
}
plot(beta_k, w)
calculateGradient=function(w,Q,b){
g = w%*%Q-b
g
}
w_init = rnorm(length(b), 0, 1)
hist(w_init)
g = calculateGradient(w_init,Q,b)
hist(g)
calculateObjective=function(w,Q,b){
obj = 1/2*t(w)%*%Q%*%w - t(b)%*%w
obj
}
obj = calculateObjective(w_init,Q,b)
calculateObjective=function(w,Q,b){
obj = 1/2*t(w)%*%Q%*%w - t(b)%*%w
obj[1,1]
}
obj = calculateObjective(w_init,Q,b)
tol = 0.002
w_diff = 1000
w_old = rnorm(length(b), 0, 1)
y_old = w_old
g = calculateGradient(w_old,Q,b)
alpha = 0.1
w_new = w_old - alpha*g
plot(w_old, w_new)
#w_diff = 1000
#while (w_diff > tol){
obj_all = NULL
for (i in 1:500){
print(i)
g = calculateGradient(w_old,Q,b)
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = w_new
}
w_old
Q
ncol(W)
ncol(Q)
b
w_old
g = calculateGradient(w_init,Q,b)
w_old = rnorm(length(b), 0, 1)
g = calculateGradient(w_old,Q,b)
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_new
alpha
g
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.1
obj_all = NULL
for (i in 1:500){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = w_new
}
plot(seq(1,500,1), obj_all)
alpha = 0.01
obj_all = NULL
for (i in 1:500){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = w_new
}
plot(seq(1,500,1), obj_all)
obj_all
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.01
obj_all = NULL
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = w_new
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.01
obj_all = NULL
for (i in 1:500){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_old = w_new
}
plot(seq(1,500,1), obj_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.01
obj_all = NULL
w_diff_all = NULL
for (i in 1:500){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
}
plot(seq(1,500,1), obj_all)
plot(seq(1,500,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.01
obj_all = NULL
w_diff_all = NULL
maxIter=1000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=1000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=1000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=2000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=2000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
if (sum(abs(w_new-w_old)) < tol){
break
}
}
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=2000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
w_old = w_new
if (i>1 && sum(abs(w_new-w_old)) < tol){
break
}
}
w_diff_all
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=2000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
if (i>1 && sum(abs(w_new-w_old)) < tol){
break
}
w_old = w_new
}
w_diff_all[2000]
min(w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=4000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
if (i>1 && sum(abs(w_new-w_old)) < tol){
break
}
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
w_old = rnorm(length(b), 0, 1)
tol = 0.002
alpha = 0.001
obj_all = NULL
w_diff_all = NULL
maxIter=6000
for (i in 1:maxIter){
print(i)
g = as.vector(calculateGradient(w_old,Q,b))
w_new = w_old - alpha*g
obj_all = c(obj_all, calculateObjective(w_new, Q, b))
w_diff_all = c(w_diff_all, sum(abs(w_new-w_old)))
if (i>1 && sum(abs(w_new-w_old)) < tol){
break
}
w_old = w_new
}
plot(seq(1,maxIter,1), obj_all)
plot(seq(1,maxIter,1), w_diff_all)
